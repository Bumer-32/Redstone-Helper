import com.modrinth.minotaur.dependencies.ModDependency
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id "fabric-loom" version "1.8.6"
  	id "org.jetbrains.kotlin.plugin.serialization" version "2.0.20"
  	id "org.jetbrains.kotlin.jvm" version "2.0.20"
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

archives_base_name = "${project.archives_base_name}-${project.minecraft_version}"

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url "https://maven.wispforest.io" }
	maven {
		name = "WorldEdit Maven"
		url = "https://maven.enginehub.org/repo/"
	}
}

modrinth {
	token = project.hasProperty("modrinthToken") ? project.modrinthToken : System.getenv("MODRINTH_TOKEN")
	projectId = project.id_main
	versionNumber = project.mod_version
	versionName = "Redstone Helper ${project.mod_version}"
	uploadFile = remapJar
	//additionalFiles = [remapSourcesJar]
	gameVersions = Eval.me(project.release_minecraft_versions)
	versionType = project.release_type
	loaders = ["fabric"]
	syncBodyFrom = rootProject.file("README.md").text
	changelog = rootProject.file("CHANGELOG.md").text
	dependencies = [
		new ModDependency(project.id_fabric_api, "required"),
		new ModDependency(project.id_fabric_kotlin, "required"),
		new ModDependency(project.id_owo, "required"),
		new ModDependency(project.id_modmenu, "optional"),
		new ModDependency(project.id_world_edit, "optional")
	]

	tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	implementation include("org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}")

	implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${project.kotlinx_coroutines_version}"
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${project.kotlinx_serialization_version}"

	modImplementation "io.wispforest:owo-lib:${project.owo_version}"
	annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	modImplementation("com.sk89q.worldedit:worldedit-fabric-mc${project.world_edit_version}") {
		exclude group: "it.unimi.dsi", module: "fastutil"
		exclude group: "com.google.guava", module: "guava"
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE")
}